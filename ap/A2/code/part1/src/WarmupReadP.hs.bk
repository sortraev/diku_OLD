module WarmupReadP where

-- Original grammar (E is start symbol):
--   E ::= E "+" T | E "-" T | T | "-" T .
--   T ::= num | "(" E ")" .
-- Lexical specifications:
--   num is one or more decimal digits (0-9)
--   tokens may be separated by arbtrary whitespace (spaces, tabs, newlines).
-- Rewritten grammar, without left-recursion:
--   E ::= T E'
--       | "-" T E'
--       | E op E -- op is left-associative; case handled by wizardry.
--   E' ::= "+" E'
--        | "-" E'
--        | eps
--   T ::= num
--       | "(" E ")"

import Text.ParserCombinators.ReadP
import Control.Applicative ((<|>))

type Parser a = ReadP a   -- may use synomym for easier portability to Parsec

type ParseError = String  -- not particularly informative with ReadP

data Exp = Num Int | Negate Exp | Add Exp Exp | Mul Exp Exp
  deriving (Eq, Show)

runParser :: ReadP a -> ReadS a
runParser = readP_to_S

parseString :: String -> Either ParseError Exp
parseString str = 
  case runParser (parseE <* eof) str of
    [(res, _)] -> Right res
    []         -> Left "No parse!"
    _          -> Left "Ambiguous parse!"


-- non-terminal parsers
parseE :: ReadP Exp
parseE = skipSpaces' $ ((char '-' >> (parseT >>= parseE' . Negate))
                    <|> (parseT >>= parseE'))

parseE' :: Exp -> ReadP Exp
parseE' e = skipSpaces' $ option e $ (char '+' >> add e id)
                                 <|> (char '-' >> add e Negate)
  where add e f = parseT >>= parseE' >>= return . Add e . f  -- probably a stupid solution ...


parseT :: ReadP Exp
parseT = skipSpaces' $ parseNum <|> inParens parseE


-- helpers

inParens :: ReadP Exp -> ReadP Exp
inParens body = skipSpaces' $ between (char '(') (char ')') body

parseNum :: ReadP Exp
parseNum = many1 (satisfy isDigit) >>= return . Num . read
  where isDigit = (`elem` ['0'..'9'])

skipSpaces' :: ReadP a -> ReadP a -- skips leading and trailing whitespace to an expression
skipSpaces' p = skipSpaces >> p >>= \e -> skipSpaces >> return e
