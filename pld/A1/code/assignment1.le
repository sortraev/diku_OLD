(define merge
  (lambda
    (xs ()) xs
    (() ys) ys
    ((x . xs) (y . ys)) (cons x (cons y (merge xs ys)))
  )
)



(define add
  (lambda
    ((x . xs)) (+ (add x) (add xs))
    (x)        (if (number? x) x 0)
  )
)




\; TESTING
(define assertEqual
  (lambda (actual actual)   'testSuccess
          (actual expected) 'testFailure
  )
)


\; merge tests
'(RUNNING MERGE TESTS)

'(merge - both operands empty)
(assertEqual (merge '() '())
             '())

'(merge - first operand empty)
(assertEqual (merge '() '(4 5 6 7))
             '(4 5 6 7))

'(merge - second operand empty)
(assertEqual (merge '(0 1 4 2) '())
             '(0 1 4 2))

'(merge - both operands non-empty)
(assertEqual (merge '(1 2 3) '(4 5 6 7))
             '(1 4 2 5 3 6 7))


\; add tests
'(RUNNING ADD TESTS)

'(add - empty sum)
(assertEqual (add '())
             0)

'(add - 1D list of numbers)
(assertEqual (add '(1 -42 4 +100 7 57 0))
             127)

'(add - list of only non-numbers)
(assertEqual (add '(cons foo '(() 1be2)))
             0)

'(add - multiple layers of nesting)
(assertEqual (add '(4 () '(5 '(-6 0 '(1 NULL -1)) 7 cons) 3 foo))
             13)
